#! /bin/bash
# Serene Programming Language
#
# Copyright (c) 2019-2022 Sameer Rahmani <lxsameer@gnu.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------------------
# Commentary
# -----------------------------------------------------------------------------
# This is the builder script for the Serene project. It makes it easier to
# interact with the CMake build scripts.
#
# In order to define a subcommand all you need to do is to define a function
# with the following syntax:
#
# function subcommand-name() { ## DESCRIPTION
#   .. subcommand body ..
# }
#
# Make sure to provid one line of DESCRIPTION for the subcommand and use two "#"
# characters to start the description following by a space. Otherwise, your
# subcommand won't be registered

# -----------------------------------------------------------------------------
# Vars & Config
# -----------------------------------------------------------------------------

command=$1

VERSION="0.4.0"

export CC=$(which clang)
export CXX=$(which clang++)

# TODO: Add sloppiness to the cmake list file as well
export CCACHE_SLOPPINESS="pch_defines,time_macros"

export ASAN_OPTIONS=check_initialization_order=1
LSAN_OPTIONS=suppressions=$(pwd)/.ignore_sanitize
export LSAN_OPTIONS
export LDFLAGS="-fuse-ld=lld"

# The `builder` script is supposed to be run from the
# root of the source tree
ROOT_DIR=$(pwd)
BUILD_DIR=$ROOT_DIR/build
ME=$(cd "$(dirname "$0")/." >/dev/null 2>&1 ; pwd -P)

CMAKEARGS_DEBUG=" -DCMAKE_BUILD_TYPE=Debug -DSERENE_WITH_MLIR_CL_OPTION=ON"
 # Verbose -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
CMAKEARGS=" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DSERENE_CCACHE_DIR=$HOME/.ccache"

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------
function fn-names() {
    grep -E '^function [0-9a-zA-Z_-]+\(\) \{ ## .*$$' $0 | sed 's/^function \([a-zA-Z0-9_-]*\)() { ## \(.*\)/\1/'
}

function gen_precompile_header_index() {
    echo "// DO NOT EDIT THIS FILE: It is aute generated by './builder gen_precompile_index'" > ./include/serene_precompiles.h
    echo "#ifndef SERENE_PRECOMPIL_H" >> ./include/serene_precompiles.h
    echo "#define SERENE_PRECOMPIL_H" >> ./include/serene_precompiles.h
    grep -oP  "#include .llvm/.*" . -R|cut -d':' -f2|tail +2 >> ./include/serene_precompiles.h
    grep -oP  "#include .mlir/.*" . -R|cut -d':' -f2|tail +2 >> ./include/serene_precompiles.h
    echo "#endif" >> ./include/serene_precompiles.h
}


function pushed_build() {
    mkdir -p "$BUILD_DIR"
    pushd "$BUILD_DIR" > /dev/null || return
}

function popd_build() {
    popd > /dev/null || return
}

function build-gen() {
    pushed_build
    echo "Running: "
    echo "cmake -G Ninja $CMAKEARGS $CMAKEARGS_DEBUG \"$@\" \"$ROOT_DIR\""
    cmake -G Ninja $CMAKEARGS $CMAKEARGS_DEBUG "$@" "$ROOT_DIR"
    popd_build
}

# -----------------------------------------------------------------------------
# Subcomaands
# -----------------------------------------------------------------------------
function compile() { ## Compiles the project using the generated build scripts
    pushed_build
    cmake --build .
    popd_build
}

function build() { ## Builds the project by regenerating the build scripts
    clean
    build-gen "$@"
    pushed_build
    cmake --build .
    popd_build
}

function build-20() { ## Builds the project using C++20 (will regenerate the build)
    clean
    pushed_build
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCPP_20_SUPPORT=ON "$@" "$ROOT_DIR"
    cmake --build .
    popd_build
}

function build-tidy { ## Builds the project using clang-tidy (It takes longer than usual)
    build "-DSERENE_ENABLE_TIDY=ON" "${@:2}"
}

function build-release() { ## Builds the project in "Release" mode
    clean
    pushed_build
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Release "$ROOT_DIR"
    cmake --build .
    popd_build
}

function build-docs() { ## Builds the documentation of Serene
    clean
    pip install -r $ME/docs/requirements.txt
    pushed_build
    cmake -G Ninja -DSERENE_ENABLE_DOCS=ON "$ROOT_DIR"
    cmake --build .
    popd_build
}

function clean() { ## Cleans up the source dir and removes the build
    rm -rf "$BUILD_DIR"
    rm -rf $(find . -iname "*~")
}

function run() { ## Runs `serenec` and passes all the given aruguments to it
    LD_PRELOAD=$(clang -print-file-name=libclang_rt.asan-x86_64.so) \
              "$BUILD_DIR"/src/serenec/serenec "$@"
}

function repl() { ## Runs `serene-repl` and passes all the given aruguments to it
    LD_PRELOAD=$(clang -print-file-name=libclang_rt.asan-x86_64.so) \
              "$BUILD_DIR"/src/serene-repl/serene-repl "$@"
}

function memcheck-serene() { ## Runs `valgrind` to check `serenec` birany
    export ASAN_FLAG=""
    build
    pushed_build
    valgrind --tool=memcheck --leak-check=yes --trace-children=yes "$BUILD_DIR"/bin/serenec "$@"
    popd_build
}

function run-tests() { ## Runs all the test cases
    LD_PRELOAD=$(clang -print-file-name=libclang_rt.asan-x86_64.so) \
              "$BUILD_DIR"/src/tests/tests
}

function tests() { ## Generates and build the project including the test cases
    pushed_build
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON "$ROOT_DIR"
    cmake --build .
    popd_build
}

function build-llvm-image() { ## Build the LLVM image that we use to build Serene's image
    source .env

    docker build \
           -f $ME/resources/docker/llvm/Dockerfile \
           -t $REGISTRY/llvm:$1-$2 \
           --build-arg VERSION=$1 \
           .
}

function push-llvm-image() { ## Pushes the LLVM image to the registery
    source .env

    docker login $REGISTRY -u $SERENE_REGISTERY_USER -p $SERENE_REGISTERY_PASS
    docker push $REGISTRY/llvm:$1
}



function build-serene-image() { ## Build the Serene docker image for the current HEAD
    source .env
    docker build \
           -f $ME/resources/docker/serene/Dockerfile \
           -t $REGISTRY/serene:$VERSION-$(git rev-parse HEAD) \
           .
}

function release-serene-image() { ## Build and push the Serene docker image for the current HEAD in Release mode
    source .env
    docker build \
           -f $ME/resources/docker/serene/Dockerfile \
           -t $REGISTRY/serene:$VERSION \
           --build-arg TASK=build-release \
           .
    docker login $REGISTRY -u $SERENE_REGISTERY_USER -p $SERENE_REGISTERY_PASS
    docker push $REGISTRY/serene:$VERSION
}


function setup() { ## Setup the working directory and make it ready for development
    rm -rfv $ME/.git/hooks/pre-commit
    ln -s $ME/scripts/pre-commit $ME/.git/hooks/pre-commit
}

function scan-build() { ## Runs the `scan-build` utility to analyze the build process
         clean
         build-gen
         pushed_build
         # The scan-build utility scans the build for bugs checkout the man page
         scan-build --force-analyze-debug-code --use-analyzer=$(which clang) cmake --build .
         popd_build
}

function help() { ## Print out this help message
echo "Commands:"
grep -E '^function [a-zA-Z0-9_-]+\(\) \{ ## .*$$' $0 | \
    sort | \
    sed 's/^function \([a-zA-Z0-9_-]*\)() { ## \(.*\)/\1:\2/' | \
    awk 'BEGIN {FS=":"}; {printf "\033[36m%-30s\033[0m %s\n", $1, $2}'
}

# -----------------------------------------------------------------------------
# Main logic
# -----------------------------------------------------------------------------
echo -e "\nSerene  Builder Version $VERSION"
echo -e "\nCopyright (C) 2019-2022"
echo -e "Sameer Rahmani <lxsameer@gnu.org>"
echo -e "Serene comes with ABSOLUTELY NO WARRANTY;"
echo -e "This is free software, and you are welcome"
echo -e "to redistribute it under certain conditions;"
echo -e "for details take a look at the LICENSE file.\n"

# Find the subcommand in the functions and run we find it.
for fn in $(fn-names); do
    if [[ $fn == "$command" ]]; then
        eval "$fn ${@:2}"
        exit $?
    fi
done

# If we couldn't find the command print out the help message
help
