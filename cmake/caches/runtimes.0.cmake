# This file sets up a CMakeCache for a Fuchsia toolchain build.
set(LLVM_TARGETS_TO_BUILD X86 CACHE STRING "")

#set(PACKAGE_VENDOR "serene-stage.0" CACHE STRING "")

message(STATUS "Set 'install_dir' to $ENV{install_dir}")
set(_SERENE_ENABLE_PROJECTS "clang;lld")

set(CMAKE_INSTALL_PREFIX $ENV{install_dir} CACHE STRING "")
#set(CMAKE_PREFIX_PATH $ENV{install_dir} CACHE STRING "")

set(CMAKE_BUILD_TYPE Release CACHE STRING "")

set(LLVM_INCLUDE_TESTS OFF CACHE BOOL "")
set(LLVM_INCLUDE_GO_TESTS OFF CACHE BOOL "")
set(LLVM_INCLUDE_EXAMPLES OFF CACHE BOOL "")
set(LLVM_INCLUDE_BENCHMARKS OFF CACHE BOOL "")
set(LLVM_INCLUDE_DOCS OFF CACHE BOOL "")
set(LLVM_ENABLE_BINDINGS OFF CACHE BOOL "")
set(LLVM_ENABLE_OCAMLDOC OFF CACHE BOOL "")
set(LLVM_ENABLE_Z3_SOLVER OFF CACHE BOOL "")
set(LLVM_TOOL_LLVM_LTO2_BUILD OFF CACHE BOOL "")
set(LLVM_TOOL_LLVM_LTO_BUILD OFF CACHE BOOL "")
set(LLVM_TOOL_LTO_BUILD OFF CACHE BOOL "")
set(LLVM_TOOL_REMARKS_SHLIB_BUILD OFF CACHE BOOL "")
set(CLANG_BUILD_TOOLS OFF CACHE BOOL "")
set(CLANG_INCLUDE_DOCS OFF CACHE BOOL "")
set(CLANG_TOOL_CLANG_IMPORT_TEST_BUILD OFF CACHE BOOL "")
set(CLANG_TOOL_CLANG_LINKER_WRAPPER_BUILD OFF CACHE BOOL "")
set(CLANG_TOOL_C_INDEX_TEST_BUILD OFF CACHE BOOL "")
set(CLANG_TOOL_ARCMT_TEST_BUILD OFF CACHE BOOL "")
set(CLANG_TOOL_C_ARCMT_TEST_BUILD OFF CACHE BOOL "")
set(CLANG_TOOL_LIBCLANG_BUILD OFF CACHE BOOL "")
set(LLVM_ENABLE_ZSTD OFF CACHE BOOL "")
set(LLVM_ENABLE_DIA_SDK OFF CACHE BOOL "")
set(LLVM_ENABLE_LIBEDIT OFF CACHE BOOL "")
set(LLVM_ENABLE_LIBXML2 OFF CACHE BOOL "")
#set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ON CACHE BOOL "")
set(LLVM_ENABLE_TERMINFO OFF CACHE BOOL "")
set(LLVM_ENABLE_UNWIND_TABLES OFF CACHE BOOL "")
set(LLVM_ENABLE_Z3_SOLVER OFF CACHE BOOL "")
set(LLVM_ENABLE_ZLIB OFF CACHE BOOL "")
#set(LLVM_USE_RELATIVE_PATHS_IN_FILES ON CACHE BOOL "")
set(LLDB_ENABLE_CURSES OFF CACHE BOOL "")
set(LLDB_ENABLE_LIBEDIT OFF CACHE BOOL "")

#set(CLANG_DEFAULT_CXX_STDLIB libc++ CACHE STRING "")
#set(CLANG_DEFAULT_LINKER lld CACHE STRING "")
#set(CLANG_DEFAULT_OBJCOPY llvm-objcopy CACHE STRING "")
#set(CLANG_DEFAULT_RTLIB compiler-rt CACHE STRING "")
#set(CLANG_DEFAULT_UNWINDLIB libunwind CACHE STRING "")
set(CLANG_ENABLE_ARCMT OFF CACHE BOOL "")
set(CLANG_ENABLE_STATIC_ANALYZER OFF CACHE BOOL "")
set(CLANG_PLUGIN_SUPPORT OFF CACHE BOOL "")

#set(ENABLE_LINKER_BUILD_ID ON CACHE BOOL "")
set(ENABLE_X86_RELAX_RELOCATIONS ON CACHE BOOL "")

set(LLVM_ENABLE_ASSERTIONS ON CACHE BOOL "")
set(LLVM_ENABLE_BACKTRACES OFF CACHE BOOL "")
set(LLVM_ENABLE_EH ON CACHE BOOL "")
set(LLVM_ENABLE_RTTI ON CACHE BOOL "")

set(LIBUNWIND_ENABLE_SHARED OFF CACHE BOOL "")
set(LIBUNWIND_INSTALL_LIBRARY ON CACHE BOOL "")
set(LIBUNWIND_USE_COMPILER_RT OFF CACHE BOOL "")
set(LIBCXXABI_ENABLE_SHARED OFF CACHE BOOL "")
set(LIBCXXABI_ENABLE_STATIC_UNWINDER ON CACHE BOOL "")
set(LIBCXXABI_INSTALL_LIBRARY ON CACHE BOOL "")
set(LIBCXXABI_USE_COMPILER_RT OFF CACHE BOOL "")
set(LIBCXXABI_USE_LLVM_UNWINDER ON CACHE BOOL "")
#set(LIBCXX_ABI_VERSION 2 CACHE STRING "")
set(LIBCXX_ENABLE_SHARED OFF CACHE BOOL "")
set(LIBCXX_INSTALL_LIBRARY ON CACHE BOOL "")
set(LIBCXX_ENABLE_STATIC_ABI_LIBRARY ON CACHE BOOL "")
set(LIBCXX_USE_COMPILER_RT OFF CACHE BOOL "")
set(LLVM_ENABLE_RUNTIMES "libcxx;libcxxabi;libunwind" CACHE STRING "") #compiler-rt
#set(LLVM_BUILD_STATIC ON  CACHE BOOL "")
#set(LLVM_ENABLE_LIBCXX ON CACHE BOOL "")
#set(LLVM_STATIC_LINK_CXX_STDLIB ON CACHE BOOL "")

#set(LLVM_HOST_TRIPLE "x86_64-alpine-linux-musl" CACHE STRING "")
#set(target "x86_64-alpine-linux-musl")

# set(LLVM_BUILTIN_TARGETS "${TARGET}" CACHE STRING "")
# set(BUILTINS_${TARGET}_CMAKE_SYSTEM_NAME Linux CACHE STRING "")
# set(BUILTINS_${TARGET}_CMAKE_BUILD_TYPE Release CACHE STRING "")

 set(LLVM_RUNTIME_TARGETS "${TARGET}" CACHE STRING "")
set(RUNTIMES_${TARGET}_CMAKE_SYSTEM_NAME Linux CACHE STRING "")
set(RUNTIMES_${TARGET}_CMAKE_BUILD_TYPE Release CACHE STRING "")
#set(RUNTIMES_${TARGET}_COMPILER_RT_USE_BUILTINS_LIBRARY ON CACHE BOOL "")
set(RUNTIMES_${TARGET}_LIBUNWIND_ENABLE_SHARED OFF CACHE BOOL "")
set(RUNTIMES_${TARGET}_LIBUNWIND_USE_COMPILER_RT OFF CACHE BOOL "")
set(RUNTIMES_${TARGET}_LIBUNWIND_INSTALL_LIBRARY ON CACHE BOOL "")
set(RUNTIMES_${TARGET}_LIBCXXABI_USE_COMPILER_RT OFF CACHE BOOL "")
set(RUNTIMES_${TARGET}_LIBCXXABI_ENABLE_SHARED OFF CACHE BOOL "")
set(RUNTIMES_${TARGET}_LIBCXXABI_USE_LLVM_UNWINDER ON CACHE BOOL "")
set(RUNTIMES_${TARGET}_LIBCXXABI_ENABLE_STATIC_UNWINDER ON CACHE BOOL "")
set(RUNTIMES_${TARGET}_LIBCXXABI_INSTALL_LIBRARY ON CACHE BOOL "")
set(RUNTIMES_${TARGET}_LIBCXX_USE_COMPILER_RT OFF CACHE BOOL "")
set(RUNTIMES_${TARGET}_LIBCXX_ENABLE_SHARED OFF CACHE BOOL "")
set(RUNTIMES_${TARGET}_LIBCXX_ENABLE_STATIC_ABI_LIBRARY ON CACHE BOOL "")
#set(RUNTIMES_${TARGET}_LIBCXX_ABI_VERSION 2 CACHE STRING "")
set(RUNTIMES_${TARGET}_LLVM_ENABLE_ASSERTIONS OFF CACHE BOOL "")
set(RUNTIMES_${TARGET}_LLVM_ENABLE_RUNTIMES "libcxx;libcxxabi;libunwind" CACHE STRING "")
set(RUNTIMES_${TARGET}_SANITIZER_CXX_ABI "libc++" CACHE STRING "")
#set(RUNTIMES_${TARGET}_SANITIZER_CXX_ABI_INTREE ON CACHE BOOL "")
# set(RUNTIMES_${TARGET}_LLVM_ENABLE_LIBCXX ON CACHE BOOL "")
#set(RUNTIMES_${TARGET}_LLVM_STATIC_LINK_CXX_STDLIB ON CACHE BOOL "")

# # set(COMPILER_RT_SCUDO_STANDALONE_BUILD_SHARED ON CACHE BOOL "")
# # set(RUNTIMES_${TARGET}_COMPILER_RT_SCUDO_STANDALONE_BUILD_SHARED ON CACHE BOOL "")

# set(COMPILER_RT_SANITIZERS_TO_BUILD asan;dfsan;msan;hwasan;tsan;safestack;cfi;ubsan_minimal CACHE STRING "")
# set(RUNTIMES_${TARGET}_COMPILER_RT_SANITIZERS_TO_BUILD asan;dfsan;msan;hwasan;tsan;safestack;cfi;ubsan_minimal CACHE STRING "")


#set(LLVM_ENABLE_PROJECTS ${_SERENE_ENABLE_PROJECTS} CACHE STRING "")
#set(LLVM_INSTALL_TOOLCHAIN_ONLY ON CACHE BOOL "")
set(RUNTIMES_${TARGET}_LIBCXX_HAS_MUSL_LIBC ON CACHE BOOL "")
set(LIBCXX_HAS_MUSL_LIBC ON CACHE BOOL "")
set(LLVM_HOST_TRIPLE ${TARGET})
set(LLVM_NATIVE_TOOL_DIR ${NATIVE_LLVM_DIR}/bin CACHE PATH "")
