* Serene lang
 Build Status: [[https://ci.devheroes.codes/api/badges/Serene/Serene/status.svg]]


** Fetching the source code
Serene comes with the build time dependencies as git submodules that set to the correct
version (Commit SHA). They live in the ~deps~ directory. So, after cloning Serene's repository,
you need to initialize the submodules as follows:

 #+BEGIN_SRC bash
   git clone git@git.devherose.codes:serene/serene.git
   cd serene
   git submodule init
   git submodule update
 #+END_SRC

Obviously, you need to build the dependencies before you can build *Serene*. But if you are
running GNU/Linux, the ~builder~ script can do that for you (Instructions below). Currently,
the ~builder~ script can take care of dependencies only on GNU/Linux, but contributions are
welcome to port it to other platforms as well.

** Dependencies
    Here is the list of dependencies that need to be present:

    - LLVM
      For exact version, check out the submodule under =deps/llvm-project=
    - CMake ~>= 3.19~
    - Ninja
    - include-what-you-use (Checkout the corresponding submodule)
    - doxygen (If you want to build the docs as well)
    - Valgrind (Optional and only for development)
    - CCache (If you want faster builds, specially with the LLVM)
    - Boehm GC v8.2.0
      Check out the submodule under =deps/bdwgc=. If you're building this library yourself,
      make sure to build in statically with ~-fPIC~ flag.

** Setup development environment
Before, you have to set up the necessary git hooks as follows:

 #+BEGIN_SRC bash
 ./builder setup
 #+END_SRC

** Build and installing dependencies (Linux only)
The ~builder~ script can build the necessary dependencies for you. Just make sure to pull down
all the dependencies as instructed above and follow:

 #+BEGIN_SRC bash

   # Download prebuilt dependencies instead of building from source (X86_64 only)

   # Try to pull a prebuilt package for the toolchain (including llvm libraries)
   ./builder deps pull toolchain
   # Try to pull a prebuilt package for BDWGC
   ./builder deps pull bdwgc

   # Or build from source
   ./builder deps build toolchain
   ./builder deps build bdwgc
 #+END_SRC

 After building or pulling the dependencies, you'll have all of them under =~/.serene/env/=.
 All you need to do is to activate the environmet and build Serene itself.

 In order to activate the environment you can just do ~source ./activate~ in the root of the
 source tree to activate the toolchain and the right set up dependencies.


** Build and installing dependencies (Other platforms)
At the moment the ~builder~ script does not support any platform beside GNU/Linux. So, you
need to build the dependencies yourself and make them available to the builder.

By the way, If you are interested, you can just hack the builder script and accommodate your
platform and contribute your changes to the project.

In order to build the dependencies in your platform, you can use the =./scripts/deps.sh= as
a reference.

* How to build
In order to build for development (Debug mode) just use =./builder build= to setup the build system,
and build the project once, and then you can just use =./builder compile= to build the changed files
only.

Check out the =builder= script for more subcommands and details.

** Head's up for devs
While you're working on *Serene* be mindful of:
- In =DEBUG= mode, we dynamically link against =libsan= due to the fact that we build the =libserene=
  as a shared lib by default. This means we need to =LD_PRELOAD= the =libclang_rt= before we run
  any executable. If you're using the =builder= script you're all set otherwise you can run an
  executable like:

  #+BEGIN_SRC bash
    LD_PRELOAD=$(clang -print-file-name=libclang_rt.asan-x86_64.so) /path/to/executable
  #+END_SRC

** Build the devtools
We have our own version of `mlir-opt` which is `slir-opt` and also we have an LSP server for SLIR too.
Both are in the ~devtools~ directory and in order to build them all you need to do is to use
~-DSERENE_ENABLE_DEVTOOLS=ON~ parameter with cmake for example ~./builder build -DSERENE_ENABLE_DEVTOOLS=ON~
will do the job for you.

* How to Debug
Since we're using the Boehm GC, in order to use a debugger we need to turn off some of the signal
handlers that the debugger sets. In order to run the debugger (by default lldb) with ~serenec~
just use the ~lldb-run~ subcommand of the builder script. In the debugger, after setting the
break point on the ~main~ function (~b main~) then use the following commands on:

  #+BEGIN_SRC bash
   process handle -p yes -s no -n no SIGPWR
   process handle -p yes -s no -n no SIGXCPU
   process handle -p yes -s no -n no SIGSEGV
  #+END_SRC bash

* Cheatsheets
  - [[https://github.com/muqsitnawaz/modern-cpp-cheatsheet][Modern C++ Cheatsheet]]

* License
Copyright (c) 2019-2022 Sameer Rahmani <lxsameer@gnu.org>

*Serene* is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 2.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

* Get Help
  If you need help or you just want to hangout, you can find us at:

  - *IRC*: *#serene-lang* on the libera chat server
  - *MailingList*: https://www.freelists.org/list/serene
